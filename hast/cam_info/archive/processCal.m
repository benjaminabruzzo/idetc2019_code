function Calibration = processCal()

% cal_file = 'Raw_stereo_20141219.yaml';
% cal_file = 'Raw_stereo_20150116.yaml';
% cal_file = 'Raw_stereo_20150123.yaml';
% cal_file = 'All_stereo_20150130.yaml';
% cal_file = '20150204RawCala.yaml';
% cal_file = '20150204RawCalb.yaml';
% cal_file = '20150204RawCalc.yaml';
% cal_file = '20150204RawCald.yaml';
% cal_file = '20150204RawCalE.yaml';
% cal_file = '20150211RawCalA.yaml';
% cal_file = '20150211RawCalB.yaml';
% cal_file = 'StereoCalRaw20150612.yaml';
% cal_file = 'StereoCalRaw20151120.yaml';
% cal_file = 'StereoCalRaw20151223.yaml';
% cal_file = 'StereoCalRaw20151229.yaml';
% cal_filename = 'StereoCalRaw20151229b';
% cal_filename = 'StereoCalRaw20160108';
% cal_filename = 'createstereo20161004x3x4';
% cal_filename = 'createstereo20161004x3x4b';
% cal_filename = 'kobukistereo20161005x3x4';
% cal_filename = 'kobukistereo20161123b';
% cal_filename = 'kobukistereo20170120';
% cal_filename = 'kobukistereo20170203';
% cal_filename = 'kobukistereo20170212';
% cal_filename = '20170317A';
% cal_filename = '20170317B';
% cal_filename = '20170317C';
% cal_filename = '20170331_calibration';
cal_filename = 'create_balckfly_20170620';
cal_file = [cal_filename '.yaml'];

disp(' ');disp(' ');
% path_to_cal = ['/media/benjamin/devsdb/hast/data/calibrations/' cal_filename '/'];
path_to_cal = ['/Users/benjamin/hast/ros/hast/cam_info' cal_filename '/'];


% savepath = [path_to_cal];
% savepath = ['~/ros/data/calibrations/' cal_filename '/'];
mkdir(path_to_cal)
% formatOut = 'yyyymmdd';
% caldate = datestr(now,formatOut);
caldate = '20170331';

% robotid = 'kobuki';
robotid = 'create';

%% 
if robotid =='kobuki'
    camXOffset = 0.075;
    camYOffset = 0.0;
    camZOffset = 0.24;
    Left.GUID  = '00b09d0100c8851b';
    Right.GUID = '00b09d0100c884f8';
elseif robotid == 'create'
    camXOffset = 0.055;
    camYOffset = 0.0;
    camZOffset = 0.225;
    Left.GUID  = '00b09d0100af04f7';
    Right.GUID = '00b09d0100af0503';
end

% path_to_caml = '/Users/benjamin/git/hast/ros/turtlebot/launch/';

%% Read in data from calibration file
disp(['loading calibration file:' path_to_cal cal_file]); disp(' ')
calID = fopen([path_to_cal cal_file]);
for s = 1:14
	rawCal(s).line(1,:) = fgets(calID);
end
%% Convert ascii text into relevant matrices
% ~~~~~~~~~~~~~~~~~~~~~~ Left Camera Matrices ~~~~~~~~~~~~~~~~~~~~~~

Left.Image.Width = 640;
Left.Image.Height = 480;

Left.DistortionMatrix = eval(rawCal(2).line(1,10:(end-2)));


A = eval(rawCal(3).line(1,10:(end-2)));
Left.CameraMatrix = reshape(A,[3,3])';
clear A

A = eval(rawCal(4).line(1,10:(end-2)));
Left.RectificationMatrix = reshape(A,[3,3])';
clear A

A = eval(rawCal(5).line(1,10:(end-2)));
Left.ProjectionMatrix = reshape(A,[4,3])';
clear A
% ~~~~~~~~~~~~~~~~~~~~~~ Right Camera Matrices ~~~~~~~~~~~~~~~~~~~~~~
Right.Image.Width = 640;
Right.Image.Height = 480;

Right.DistortionMatrix = eval(rawCal(8).line(1,10:(end-2)));

A = eval(rawCal(9).line(1,10:(end-2)));
Right.Camera.Matrix = reshape(A,[3,3])';
clear A

A = eval(rawCal(10).line(1,10:(end-2)));
Right.RectificationMatrix = reshape(A,[3,3])';
clear A

A = eval(rawCal(11).line(1,10:(end-2)));
Right.ProjectionMatrix = reshape(A,[4,3])';
clear A
%% ~~~~~~~~~~~~~~~~~~~~~~ Compute Calibration Parameters ~~~~~~~~~~~~~~~~~

Right.Camera.Inverse = inv(Right.Camera.Matrix);
M = Right.Camera.Inverse*Right.ProjectionMatrix;
Baseline = abs(M(1,4));
Cx = Right.ProjectionMatrix(1,3);
Cy = Right.ProjectionMatrix(2,3);
FocalLength = Right.ProjectionMatrix(1,1);

disp('M = ')
disp(M)

disp('Baseline[m] FocalLength[px] Cx[px] Cy[px] = ')
disp([Baseline FocalLength Cx Cy])
%% ~~~~~~~~~~~~~~~~~~~~~~ Save Calibration to mat files ~~~~~~~~~~~~~~~~~~
Calibration.Left = Left;
Calibration.Right = Right;

disp([[path_to_cal cal_filename '.mat saved']])
save([path_to_cal cal_filename '.mat'], 'Calibration');
%% ~~~~~~~~~~~~~~~~~~~~~~ Write  cam_robotid.launch ~~~~~~~~~~~~~~~~~~~~~~
Launch.filename = [path_to_cal 'cam_' robotid '.launch'];
Launch.fileID = fopen(Launch.filename,'w');
fprintf(Launch.fileID, '<!-- -*- mode: XML -*- -->\n');
fprintf(Launch.fileID, '<!-- launch file auto-generated by: %s -->\n\n', cal_file);
fprintf(Launch.fileID, '<!-- launch file auto-generated on: %s -->\n\n', caldate);
fprintf(Launch.fileID, '<launch>\n');

% ----------- param group -----------
fprintf(Launch.fileID, '<group ns="/hast/stereo" >\n', 'left');
fprintf(Launch.fileID, '\t<rosparam file="/home/turtlebot/ros/src/hast/cam_info/%s_stereo_params.yaml" command="load"/>\n', robotid);
fprintf(Launch.fileID,'</group>\n\n');

% ----------- left group -----------
fprintf(Launch.fileID, '<group ns="%s" >\n', 'left');
fprintf(Launch.fileID, '\t<node pkg="nodelet" type="nodelet" name="%s_manager" args="manager" />\n', 'left');
fprintf(Launch.fileID, '\t<node pkg="nodelet" type="nodelet" name="camera1394_nodelet" args="load camera1394/driver %s_manager">\n', 'left');
fprintf(Launch.fileID, '\t\t<rosparam file="/home/turtlebot/ros/src/hast/cam_info/%s.yaml" /> \n', Left.GUID);
fprintf(Launch.fileID, '\t\t<param name="guid" value="%s" />\n', Left.GUID);
fprintf(Launch.fileID, '\t</node>\n');
fprintf(Launch.fileID, '\t<node pkg="nodelet" type="nodelet" name="image_proc_debayer" args="load image_proc/debayer left_manager">\n');
fprintf(Launch.fileID, '\t\t<param name="bayer_pattern" value="rggb" />\n');
fprintf(Launch.fileID, '\t\t<param name="guid" value="%s" />\n',Left.GUID);
fprintf(Launch.fileID, '\t\t<remap from="image_color" to="camera/image_color" />\n');
fprintf(Launch.fileID, '\t\t<remap from="image_mono" to="camera/image_mono" />\n');
fprintf(Launch.fileID, '\t\t<remap from="image_raw" to="camera/image_raw" />\n');
fprintf(Launch.fileID, '\t</node>\n');
fprintf(Launch.fileID, '\t<node ns="camera" pkg="image_proc" type="image_proc" name="image_proc" />\n');
fprintf(Launch.fileID, '\t<node pkg="image_view" type="image_view" name="image_view" >\n');
fprintf(Launch.fileID, '\t\t<remap from="image" to="camera/image_raw" />\n');
fprintf(Launch.fileID, '\t</node>\n');
fprintf(Launch.fileID, '</group>\n\n');

% ----------- right group -----------
fprintf(Launch.fileID, '<group ns="%s" >\n', 'right');
fprintf(Launch.fileID, '\t<node pkg="nodelet" type="nodelet" name="%s_manager" args="manager" />\n', 'right');
fprintf(Launch.fileID, '\t<node pkg="nodelet" type="nodelet" name="camera1394_nodelet" args="load camera1394/driver %s_manager">\n', 'right');
fprintf(Launch.fileID, '\t\t<rosparam file="/home/turtlebot/ros/src/hast/cam_info/%s.yaml" /> \n', Right.GUID);
fprintf(Launch.fileID, '\t\t<param name="guid" value="%s" />\n', Right.GUID);
fprintf(Launch.fileID, '\t</node>\n');
fprintf(Launch.fileID, '\t<node pkg="nodelet" type="nodelet" name="image_proc_debayer" args="load image_proc/debayer right_manager">\n');
fprintf(Launch.fileID, '\t\t<param name="bayer_pattern" value="rggb" />\n');
fprintf(Launch.fileID, '\t\t<param name="guid" value="%s" />\n',Right.GUID);
fprintf(Launch.fileID, '\t\t<remap from="image_color" to="camera/image_color" />\n');
fprintf(Launch.fileID, '\t\t<remap from="image_mono" to="camera/image_mono" />\n');
fprintf(Launch.fileID, '\t\t<remap from="image_raw" to="camera/image_raw" />\n');
fprintf(Launch.fileID, '\t</node>\n');
fprintf(Launch.fileID, '\t<node ns="camera" pkg="image_proc" type="image_proc" name="image_proc" />\n');
fprintf(Launch.fileID, '\t<node pkg="image_view" type="image_view" name="image_view" >\n');
fprintf(Launch.fileID, '\t\t<remap from="image" to="camera/image_raw" />\n');
fprintf(Launch.fileID, '\t</node>\n');
fprintf(Launch.fileID, '</group>\n\n');

% ----------- setstrobe -----------
fprintf(Launch.fileID,'<node pkg="hast" type="setStrobe" name="setStrobe" output="screen"/>\n');
fprintf(Launch.fileID,'\n\n</launch>');
disp([Launch.filename ' created'])
%% ~~~~~~~~~~~~~~~~~~~~~~ Write  leftcam.yaml ~~~~~~~~~~~~~~~~~~~~~~
Left.ID_filename = [path_to_cal Left.GUID '.yaml'];
Left.yamlID = fopen(Left.ID_filename,'w');
fprintf(Left.yamlID,'# %s stereo-left camera calibration parameters\n', robotid);
fprintf(Left.yamlID,'# [narrow_stereo/left]\n');
fprintf(Left.yamlID,'# GUID %s\n', Left.GUID);
fprintf(Left.yamlID,'# yaml file auto-generated by : %s\n', cal_file);
fprintf(Left.yamlID,'# yaml file auto-generated on : %s\n', caldate);
fprintf(Left.yamlID,'#### TAB CANNOT BE USED #####\n\n');

fprintf(Left.yamlID,'image_width: %i\n', Left.Image.Width);
fprintf(Left.yamlID,'image_height: %i\n\n', Left.Image.Height);

fprintf(Left.yamlID,'camera_matrix:\n');
fprintf(Left.yamlID,'  rows: %i\n', size(Left.CameraMatrix,1));
fprintf(Left.yamlID,'  cols: %i\n', size(Left.CameraMatrix,2));
fprintf(Left.yamlID,'  data: [');
	A = Left.CameraMatrix';
	for idx = 1:(numel(Left.CameraMatrix)-1)
		fprintf(Left.yamlID,'%6.16f, ',A(idx));
	end
	fprintf(Left.yamlID,'%6.16f]\n\n', A(end));
	clear A;

fprintf(Left.yamlID,'distortion_coefficients:\n');
fprintf(Left.yamlID,'  rows: %i\n',size(Left.DistortionMatrix,1));
fprintf(Left.yamlID,'  cols: %i\n',size(Left.DistortionMatrix,2));
fprintf(Left.yamlID,'  data: [');
	A = Left.DistortionMatrix';
	for idx = 1:(numel(Left.DistortionMatrix)-1)
		fprintf(Left.yamlID,'%6.16f, ',A(idx));
	end
	fprintf(Left.yamlID,'%6.16f]\n\n', A(end));
	clear A;

fprintf(Left.yamlID,'rectification_matrix:\n');
fprintf(Left.yamlID,'  rows: %i\n',size(Left.RectificationMatrix,1));
fprintf(Left.yamlID,'  cols: %i\n',size(Left.RectificationMatrix,2));
fprintf(Left.yamlID,'  data: [');
	A = Left.RectificationMatrix';
	for idx = 1:(numel(Left.RectificationMatrix)-1)
		fprintf(Left.yamlID,'%6.16f, ',A(idx));
	end
	fprintf(Left.yamlID,'%6.16f]\n\n', A(end));
	clear A;

fprintf(Left.yamlID,'projection_matrix:\n');
fprintf(Left.yamlID,'  rows: %i\n',size(Left.ProjectionMatrix,1));
fprintf(Left.yamlID,'  cols: %i\n',size(Left.ProjectionMatrix,2));
fprintf(Left.yamlID,'  data: [');
	A = Left.ProjectionMatrix';
	for idx = 1:(numel(Left.ProjectionMatrix)-1)
		fprintf(Left.yamlID,'%6.16f, ',A(idx));
	end
	fprintf(Left.yamlID,'%6.16f]\n\n', A(end));
	clear A;

fprintf(Left.yamlID,'camera_info_url: file:///home/turtlebot/ros/src/hast/cam_info/${NAME}.yaml\n\n');

fprintf(Left.yamlID,'#Auto-Control States\n');
fprintf(Left.yamlID,'#Off (0): turns the feature off\n');
fprintf(Left.yamlID,'#Query (1): returns the current mode and (if possible) the value of the feature, with no change to the device\n');
fprintf(Left.yamlID,'#Auto (2): the camera sets the value continuously\n');
fprintf(Left.yamlID,'#Manual (3): sets a specific value from the corresponding parameter\n');
fprintf(Left.yamlID,'#OnePush (4): the camera sets the value once, then holds it constant\n');
fprintf(Left.yamlID,'#None (5): the camera does not provide this feature \n\n');

fprintf(Left.yamlID,'auto_brightness: 3\n');
fprintf(Left.yamlID,'auto_gain: 3\n');
fprintf(Left.yamlID,'auto_gamma: 3\n');
fprintf(Left.yamlID,'auto_hue: 3\n');
fprintf(Left.yamlID,'auto_saturation: 3\n');
fprintf(Left.yamlID,'auto_sharpness: 3\n');
fprintf(Left.yamlID,'auto_shutter: 3\n');
fprintf(Left.yamlID,'auto_white_balance: 3\n\n');

fprintf(Left.yamlID,'auto_iris: 3\n');
fprintf(Left.yamlID,'auto_exposure: 3\n');
fprintf(Left.yamlID,'auto_focus: 3\n');
fprintf(Left.yamlID,'auto_zoom: 3\n\n');


fprintf(Left.yamlID,'#Control parameters\n');
fprintf(Left.yamlID,'bayer_pattern: rggb\n');
fprintf(Left.yamlID,'brightness: 170.0\n');
fprintf(Left.yamlID,'exposure: 25.0\n');
fprintf(Left.yamlID,'frame_id: /camera\n');
fprintf(Left.yamlID,'frame_rate: 60.0\n');
fprintf(Left.yamlID,'gain: 16.0\n');
fprintf(Left.yamlID,'gamma: 0\n');
fprintf(Left.yamlID,'hue: 0.0\n');
fprintf(Left.yamlID,'iris: 8.0\n');
fprintf(Left.yamlID,'iso_speed: 400 #Fixed, the cameras dont operate on other ISO\n');
fprintf(Left.yamlID,'reset_on_open: false\n');
fprintf(Left.yamlID,'#shutter: 0.00715327 #Absoulte shutter time ~2ms ABSOLUTE IS NOT FUNCTIONAL OPTION\n');
fprintf(Left.yamlID,'shutter: 120\n');
fprintf(Left.yamlID,'use_ros_time: true\n');
fprintf(Left.yamlID,'video_mode: 640x480_mono8\n');
fprintf(Left.yamlID,'white_balance_RV: 170.0 #WHITE BALANCE IS VERY IMPORTANT\n');
fprintf(Left.yamlID,'white_balance_BU: 350.0 #WHITE BALANCE IS VERY IMPORTANT\n\n');

fprintf(Left.yamlID,['bayer_method: ''''  #default method, uses ros image_proc\n']);
fprintf(Left.yamlID,'binning_x: 0\n');
fprintf(Left.yamlID,'binning_y: 0\n');
fprintf(Left.yamlID,'focus: 0.0\n');
fprintf(Left.yamlID,'format7_color_coding: mono16\n');
fprintf(Left.yamlID,'format7_packet_size: 0\n');
fprintf(Left.yamlID,'roi_height: 0\n');
fprintf(Left.yamlID,'roi_width: 0\n');
fprintf(Left.yamlID,'saturation: 1.0\n');
fprintf(Left.yamlID,'sharpness: 1.0\n');
fprintf(Left.yamlID,'x_offset: 0\n');
fprintf(Left.yamlID,'y_offset: 0\n');
fprintf(Left.yamlID,'zoom: 0.0\n');



disp([Left.ID_filename ' created']);
% end
%% ~~~~~~~~~~~~~~~~~~~~~~ Write rightcam.yaml ~~~~~~~~~~~~~~~~~~~~~~
Right.ID_filename = [path_to_cal Right.GUID '.yaml'];
Right.yamlID = fopen(Right.ID_filename,'w');
fprintf(Right.yamlID,'# %s stereo-right camera calibration parameters\n', robotid);
fprintf(Right.yamlID,'# [narrow_stereo/right]\n');
fprintf(Right.yamlID,'# GUID %s\n', Right.GUID);
fprintf(Right.yamlID,'# yaml file auto-generated by : %s\n', cal_file);
fprintf(Right.yamlID,'# yaml file auto-generated on : %s\n', caldate);
fprintf(Right.yamlID,'#### TAB CANNOT BE USED #####\n\n');

fprintf(Right.yamlID,'image_width: %i\n', Right.Image.Width);
fprintf(Right.yamlID,'image_height: %i\n\n', Right.Image.Height);

fprintf(Right.yamlID,'camera_matrix:\n');
fprintf(Right.yamlID,'  rows: %i\n', size(Right.Camera.Matrix,1));
fprintf(Right.yamlID,'  cols: %i\n', size(Right.Camera.Matrix,2));
fprintf(Right.yamlID,'  data: [');
	A = Right.Camera.Matrix';
	for idx = 1:(numel(Right.Camera.Matrix)-1)
		fprintf(Right.yamlID,'%6.16f, ',A(idx));
	end
	fprintf(Right.yamlID,'%6.16f]\n\n', A(end));
	clear A;

fprintf(Right.yamlID,'distortion_coefficients:\n');
fprintf(Right.yamlID,'  rows: %i\n',size(Right.DistortionMatrix,1));
fprintf(Right.yamlID,'  cols: %i\n',size(Right.DistortionMatrix,2));
fprintf(Right.yamlID,'  data: [');
	A = Right.DistortionMatrix';
	for idx = 1:(numel(Right.DistortionMatrix)-1)
		fprintf(Right.yamlID,'%6.16f, ',A(idx));
	end
	fprintf(Right.yamlID,'%6.16f]\n\n', A(end));
	clear A;

fprintf(Right.yamlID,'rectification_matrix:\n');
fprintf(Right.yamlID,'  rows: %i\n',size(Right.RectificationMatrix,1));
fprintf(Right.yamlID,'  cols: %i\n',size(Right.RectificationMatrix,2));
fprintf(Right.yamlID,'  data: [');
	A = Right.RectificationMatrix';
	for idx = 1:(numel(Right.RectificationMatrix)-1)
		fprintf(Right.yamlID,'%6.16f, ',A(idx));
	end
	fprintf(Right.yamlID,'%6.16f]\n\n', A(end));
	clear A;

fprintf(Right.yamlID,'projection_matrix:\n');
fprintf(Right.yamlID,'  rows: %i\n',size(Right.ProjectionMatrix,1));
fprintf(Right.yamlID,'  cols: %i\n',size(Right.ProjectionMatrix,2));
fprintf(Right.yamlID,'  data: [');
	A = Right.ProjectionMatrix';
	for idx = 1:(numel(Right.ProjectionMatrix)-1)
		fprintf(Right.yamlID,'%6.16f, ',A(idx));
	end
	fprintf(Right.yamlID,'%6.16f]\n\n', A(end));
	clear A;

fprintf(Right.yamlID,'camera_info_url: file:///home/turtlebot/ros/src/hast/cam_info/${NAME}.yaml\n\n');

fprintf(Right.yamlID,'#Auto-Control States\n');
fprintf(Right.yamlID,'#Off (0): turns the feature off\n');
fprintf(Right.yamlID,'#Query (1): returns the current mode and (if possible) the value of the feature, with no change to the device\n');
fprintf(Right.yamlID,'#Auto (2): the camera sets the value continuously\n');
fprintf(Right.yamlID,'#Manual (3): sets a specific value from the corresponding parameter\n');
fprintf(Right.yamlID,'#OnePush (4): the camera sets the value once, then holds it constant\n');
fprintf(Right.yamlID,'#None (5): the camera does not provide this feature \n\n');

fprintf(Right.yamlID,'auto_brightness: 3\n');
fprintf(Right.yamlID,'auto_gain: 3\n');
fprintf(Right.yamlID,'auto_gamma: 3\n');
fprintf(Right.yamlID,'auto_hue: 3\n');
fprintf(Right.yamlID,'auto_saturation: 3\n');
fprintf(Right.yamlID,'auto_sharpness: 3\n');
fprintf(Right.yamlID,'auto_shutter: 3\n');
fprintf(Right.yamlID,'auto_white_balance: 3\n\n');

fprintf(Right.yamlID,'auto_iris: 3\n');
fprintf(Right.yamlID,'auto_exposure: 3\n');
fprintf(Right.yamlID,'auto_focus: 3\n');
fprintf(Right.yamlID,'auto_zoom: 3\n\n');

fprintf(Right.yamlID,'#Control parameters\n');
fprintf(Right.yamlID,'bayer_pattern: rggb\n');
fprintf(Right.yamlID,'brightness: 170.0\n');
fprintf(Right.yamlID,'exposure: 25.0\n');
fprintf(Right.yamlID,'frame_id: /camera\n');
fprintf(Right.yamlID,'frame_rate: 60.0\n');
fprintf(Right.yamlID,'gain: 16.0\n');
fprintf(Right.yamlID,'gamma: 0\n');
fprintf(Right.yamlID,'hue: 0.0\n');
fprintf(Right.yamlID,'iris: 8.0\n');
fprintf(Right.yamlID,'iso_speed: 400 #Fixed, the cameras dont operate on other ISO\n');
fprintf(Right.yamlID,'reset_on_open: false\n');
fprintf(Right.yamlID,'#shutter: 0.00715327 #Absoulte shutter time ~2ms ABSOLUTE IS NOT FUNCTIONAL OPTION\n');
fprintf(Right.yamlID,'shutter: 120\n');
fprintf(Right.yamlID,'use_ros_time: true\n');
fprintf(Right.yamlID,'video_mode: 640x480_mono8\n');
fprintf(Right.yamlID,'white_balance_RV: 170.0 #WHITE BALANCE IS VERY IMPORTANT\n');
fprintf(Right.yamlID,'white_balance_BU: 350.0 #WHITE BALANCE IS VERY IMPORTANT\n\n');

fprintf(Right.yamlID,['bayer_method: '''' #default method, uses ros image_proc\n']);
fprintf(Right.yamlID,'binning_x: 0\n');
fprintf(Right.yamlID,'binning_y: 0\n');
fprintf(Right.yamlID,'focus: 0.0\n');
fprintf(Right.yamlID,'format7_color_coding: mono16\n');
fprintf(Right.yamlID,'format7_packet_size: 0\n');
fprintf(Right.yamlID,'roi_height: 0\n');
fprintf(Right.yamlID,'roi_width: 0\n');
fprintf(Right.yamlID,'saturation: 1.0\n');
fprintf(Right.yamlID,'sharpness: 1.0\n');
fprintf(Right.yamlID,'x_offset: 0\n');
fprintf(Right.yamlID,'y_offset: 0\n');
fprintf(Right.yamlID,'zoom: 0.0\n\n');

disp([Right.ID_filename ' created']);
%% ~~~~~~~~~~~~~~~~~~~~~~ Write robotid_stereo_params.yaml ~~~~~~~~~~~~~~~~~~~~~~
% git_path = '/Users/benjamin/git/hast/ros/turtlebot/cam_info/';
% Stereo.param_filename = [git_path caldate '_' robotid '_stereo_params.yaml']; 
Stereo.param_filename = [path_to_cal robotid '_stereo_params.yaml']; 

Stereo.yamlID = fopen(Stereo.param_filename,'w');
fprintf(Stereo.yamlID,'# %s stereo camera calibration parameters\n', robotid);
fprintf(Stereo.yamlID,'# Right GUID %s\n', Right.GUID);
fprintf(Stereo.yamlID,'# Left GUID %s\n', Left.GUID);
fprintf(Stereo.yamlID,'# yaml file auto-generated by : %s\n', cal_file);
fprintf(Stereo.yamlID,'# yaml file auto-generated on : %s\n', caldate);
fprintf(Stereo.yamlID,'#### TAB CANNOT BE USED #####\n\n');

fprintf(Stereo.yamlID,'FocalLength: %6.16f\n',FocalLength);
fprintf(Stereo.yamlID,'Baseline: %6.16f\n',Baseline);
fprintf(Stereo.yamlID,'RightOffset: %6.16f\n',Right.ProjectionMatrix(1,4));
fprintf(Stereo.yamlID,'camXOffset: %6.6f\n',camXOffset);
fprintf(Stereo.yamlID,'camYOffset: %6.6f\n',camYOffset);
fprintf(Stereo.yamlID,'camZOffset: %6.6f\n',camZOffset);
fprintf(Stereo.yamlID,'Cx: %6.16f\n',Cx);
fprintf(Stereo.yamlID,'Cy: %6.16f',Cy);

disp([Stereo.param_filename ' created']);
disp(' ');disp(' ');





end