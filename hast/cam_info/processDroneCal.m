function processCal()
disp(' ');disp(' ');
clc
clear all
close all
path_to_cal = '/Users/benjamin/git/hast/ros/turtlebot/cam_info/';
% path_to_cal = '/Users/benjamin/Desktop/';
% cal_file = 'Raw_stereo_20141219.yaml';
% cal_file = 'Raw_stereo_20150116.yaml';
% cal_file = 'Raw_stereo_20150123.yaml';
% cal_file = 'All_stereo_20150130.yaml';
% cal_file = '20150204RawCala.yaml';
% cal_file = '20150204RawCalb.yaml';
% cal_file = '20150204RawCalc.yaml';
% cal_file = '20150204RawCald.yaml';
% cal_file = '20150204RawCalE.yaml';
% cal_file = '20150211RawCalA.yaml';
% cal_file = '20150211RawCalB.yaml';
% cal_file = 'StereoCalRaw20150612.yaml';
% cal_file = 'StereoCalRaw20151120.yaml';
cal_file = 'ardrone_bottom_20151120.yaml';
date = '2015 11 20';
% robotid = 'ardroneA';
robotid = 'ardroneB';

%% 
if 0
elseif robotid =='ardroneA'
    camXOffset = 0;
    camYOffset = 0;
    camZOffset = 0.5;
    camRx = -1.57;
    camRy = 0; 
    camRz = -1.57;
elseif robotid =='ardroneB'
    camXOffset = 0;
    camYOffset = 0;
    camZOffset = 0.5;
    camRx = -1.57;
    camRy = 0; 
    camRz = -1.57;

end

path_to_caml = '/Users/benjamin/git/hast/ros/turtlebot/launch/';
% path_to_caml = '/Users/benjamin/Desktop/';
%% Read in data form calibration file
disp(['loading calibration file:' path_to_cal cal_file]); disp(' ')
calID = fopen([path_to_cal cal_file]);
for s = 1:36
	rawCal(s).line(1,:) = fgets(calID);
end

%% Convert ascii text into relevant matrices
% ~~~~~~~~~~~~~~~~~~~~~~ Left Camera Matrices ~~~~~~~~~~~~~~~~~~~~~~


DistortionMatrix = eval(rawCal(1).line(1,10:(end-2)));

A = eval(rawCal(2).line(1,10:(end-2)));
CameraMatrix = reshape(A,[3,3])';
clear A

A = eval(rawCal(3).line(1,10:(end-2)));
RectificationMatrix = reshape(A,[3,3])';
clear A

A = eval(rawCal(4).line(1,10:(end-2)));
ProjectionMatrix = reshape(A,[4,3])';
clear A

ImageWidth = eval(rawCal(12).line(1,1:end-1));
ImageHeight = eval(rawCal(15).line(1,1:end-1));


% ImageWidth = 640
% ImageHeight = 480



% ~~~~~~~~~~~~~~~~~~~~~~ Compute Calibration Parameters ~~~~~~~~~~~~~~~~~~~~~~

Cx = ProjectionMatrix(1,3);
Cy = ProjectionMatrix(2,3);



% ~~~~~~~~~~~~~~~~~~~~~~ Write  drone.launch ~~~~~~~~~~~~~~~~~~~~~~
launch_filename = [path_to_caml robotid '.launch'];
dotlID = fopen(launch_filename,'w');
fprintf(dotlID, '<!-- -*- mode: XML -*- -->\n');
fprintf(dotlID, '<!-- Old drone1.0 name:  -->\n');
fprintf(dotlID, '<!-- Old drone2.0 name:  -->\n');
fprintf(dotlID, '<!-- New drone2.0 name: 065412 -->\n\n');
fprintf(dotlID, '<!-- launch file auto-generated by: %s -->\n', cal_file);
fprintf(dotlID, '<!-- launch file auto-generated on: %s -->\n\n', date);
fprintf(dotlID, '<launch>\n');

% ----------- autonomy node -----------
fprintf(dotlID,'\t<node pkg="ardrone_autonomy" type="ardrone_driver" name="ardrone_autonomy" output="screen" clear_params="true">\n');
fprintf(dotlID,'\t\t<!-- Tunes the speed at which the ros loop runs, and thus, the rate at which navdata is published -->\n');
fprintf(dotlID,'\t\t<param name="looprate" value="50" />\n\n');

fprintf(dotlID,'\t\t<!-- Do we want to publish new-style navdata when received (true), or every time the ros-loop runs (false)? -->\n');
fprintf(dotlID,'\t\t<!-- (does not affect legacy navdata, which is always published at ros-loop rate) -->\n');
fprintf(dotlID,'\t\t<param name="realtime_navdata" value="true" />\n');
fprintf(dotlID,'\t\t<param name="realtime_video" value="true" />\n');
fprintf(dotlID,'\t\t<param name="enable_navdata_pwm" value="true"/>\n\n');

fprintf(dotlID,'\t\t<!-- Covariance Values (3x3 matrices reshaped to 1x9)-->\n');
fprintf(dotlID,'\t\t<param name="tf_prefix" value="ardrone2" />\n');
fprintf(dotlID,'\t\t<param name="do_imu_caliberation" value="true" />\n');
fprintf(dotlID,'\t\t<rosparam param="cov/imu_la">[0.1, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1]</rosparam>\n');
fprintf(dotlID,'\t\t<rosparam param="cov/imu_av">[1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]</rosparam>\n');
fprintf(dotlID,'\t\t<rosparam param="cov/imu_or">[1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 100000.0]</rosparam>\n\n');

fprintf(dotlID,'\t\t<remap from="/cmd_vel" to="ardrone/cmd_vel"/>\n');
fprintf(dotlID,'\t\t<!-- <rosparam file="/home/turtlebot/ros/src/hast/cam_info/00b09d0100c8851b.yaml" />  -->\n');
fprintf(dotlID,'\t</node>\n\n');

fprintf(dotlID,'\t<node pkg="rostopic" type="rostopic" name="navdataEcho" output="screen" args="echo /ardrone/navdata" />\n\n');
fprintf(dotlID,'\t<node pkg="tf" type="static_transform_publisher" name="world_to_cam"  args="0 0 0.5 -1.57 0 -1.57 world camera 1" />\n');
fprintf(dotlID,'\t<node pkg="tf" type="static_transform_publisher" name="cam_to_camlink"   args="0 0 0 0 0 0 camera ardrone_base_bottomcam 1" />\n\n');

fprintf(dotlID,'\t<node pkg="image_view" type="image_view" name="image_view" >\n');
fprintf(dotlID,'\t\t<remap from="image" to="ardrone/bottom/image_raw" />\n');
fprintf(dotlID,'\t</node>\n');
	
fprintf(dotlID,'</launch>\n');
disp([launch_filename ' created'])


% % ~~~~~~~~~~~~~~~~~~~~~~ Write  leftcam.yaml ~~~~~~~~~~~~~~~~~~~~~~

leftID_filename = [path_to_cal 'ardrone_bottom.yaml'];
leftyamlID = fopen(leftID_filename,'w');
fprintf(leftyamlID,'# %s bottom camera calibration parameters\n', robotid);
fprintf(leftyamlID,'# yaml file auto-generated by : %s\n', cal_file);
fprintf(leftyamlID,'# yaml file auto-generated on : %s\n', date);
fprintf(leftyamlID,'#### TAB CANNOT BE USED #####\n\n');

fprintf(leftyamlID,'image_width: %i\n', ImageWidth);
fprintf(leftyamlID,'image_height: %i\n\n', ImageHeight);

fprintf(leftyamlID,'camera_name: ardrone_bottom\n\n');

fprintf(leftyamlID,'camera_matrix:\n');
fprintf(leftyamlID,'  rows: %i\n', size(CameraMatrix,1));
fprintf(leftyamlID,'  cols: %i\n', size(CameraMatrix,2));
fprintf(leftyamlID,'  data: [');
	A = CameraMatrix';
	for idx = 1:(numel(CameraMatrix)-1)
		fprintf(leftyamlID,'%6.16f, ',A(idx));
	end
	fprintf(leftyamlID,'%6.16f]\n\n', A(end));
	clear A;
fprintf(leftyamlID,'distortion_model: plumb_bob\n');
fprintf(leftyamlID,'distortion_coefficients:\n');
fprintf(leftyamlID,'  rows: %i\n',size(DistortionMatrix,1));
fprintf(leftyamlID,'  cols: %i\n',size(DistortionMatrix,2));
fprintf(leftyamlID,'  data: [');
	A = DistortionMatrix';
	for idx = 1:(numel(DistortionMatrix)-1)
		fprintf(leftyamlID,'%6.16f, ',A(idx));
	end
	fprintf(leftyamlID,'%6.16f]\n\n', A(end));
	clear A;

fprintf(leftyamlID,'rectification_matrix:\n');
fprintf(leftyamlID,'  rows: %i\n',size(RectificationMatrix,1));
fprintf(leftyamlID,'  cols: %i\n',size(RectificationMatrix,2));
fprintf(leftyamlID,'  data: [');
	A = RectificationMatrix';
	for idx = 1:(numel(RectificationMatrix)-1)
		fprintf(leftyamlID,'%6.16f, ',A(idx));
	end
	fprintf(leftyamlID,'%6.16f]\n\n', A(end));
	clear A;

fprintf(leftyamlID,'projection_matrix:\n');
fprintf(leftyamlID,'  rows: %i\n',size(ProjectionMatrix,1));
fprintf(leftyamlID,'  cols: %i\n',size(ProjectionMatrix,2));
fprintf(leftyamlID,'  data: [');
	A = ProjectionMatrix';
	for idx = 1:(numel(ProjectionMatrix)-1)
		fprintf(leftyamlID,'%6.16f, ',A(idx));
	end
	fprintf(leftyamlID,'%6.16f]\n\n', A(end));
	clear A;

disp([leftID_filename ' created']);


end